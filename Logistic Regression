import pandas as pd
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.impute import SimpleImputer
from sklearn.feature_selection import SelectKBest, f_classif
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, f1_score, recall_score, precision_score

# 讀取Excel文件，將'--'視為缺失值
data = pd.read_csv('new_data.csv', na_values='--')

# Extract features and target
X = data.iloc[:, 2:]  # Starting from the 6th column as feature variables
y = data['Group']

# 處理缺失值使用SimpleImputer
imputer = SimpleImputer(strategy='mean')  # 使用均值填充缺失值
X = imputer.fit_transform(X)

# 將數據集拆分為訓練集和測試集
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# 特徵選擇 - 使用SelectKBest選擇前k個最重要的特徵


# 標準化數據
# 創建 StandardScaler
scaler = StandardScaler()

# 使用 StandardScaler 來縮放數據
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)


# 創建邏輯迴歸分類器
classifier = LogisticRegression()

# 訓練模型
classifier.fit(X_train_scaled, y_train)

# 使用模型進行預測
y_pred = classifier.predict(X_test_scaled)

# 計算準確率、F1分數、召回率和精確率
accuracy = accuracy_score(y_test, y_pred)
f1 = f1_score(y_test, y_pred, average='weighted')
recall = recall_score(y_test, y_pred, average='weighted')
precision = precision_score(y_test, y_pred, average='weighted')

print('Accuracy: ', "%.2f" % (accuracy * 100))
print('F1 Score: ', "%.2f" % (f1 * 100))
print('Recall: ', "%.2f" % (recall * 100))
print('Precision: ', "%.2f" % (precision * 100))
